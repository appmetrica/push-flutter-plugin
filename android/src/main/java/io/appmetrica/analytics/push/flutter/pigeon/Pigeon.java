// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.appmetrica.analytics.push.flutter.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PermissionOptions {
    private @NonNull Boolean alert;

    public @NonNull Boolean getAlert() {
      return alert;
    }

    public void setAlert(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"alert\" is null.");
      }
      this.alert = setterArg;
    }

    private @NonNull Boolean badge;

    public @NonNull Boolean getBadge() {
      return badge;
    }

    public void setBadge(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"badge\" is null.");
      }
      this.badge = setterArg;
    }

    private @NonNull Boolean sound;

    public @NonNull Boolean getSound() {
      return sound;
    }

    public void setSound(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sound\" is null.");
      }
      this.sound = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PermissionOptions() {}

    public static final class Builder {

      private @Nullable Boolean alert;

      public @NonNull Builder setAlert(@NonNull Boolean setterArg) {
        this.alert = setterArg;
        return this;
      }

      private @Nullable Boolean badge;

      public @NonNull Builder setBadge(@NonNull Boolean setterArg) {
        this.badge = setterArg;
        return this;
      }

      private @Nullable Boolean sound;

      public @NonNull Builder setSound(@NonNull Boolean setterArg) {
        this.sound = setterArg;
        return this;
      }

      public @NonNull PermissionOptions build() {
        PermissionOptions pigeonReturn = new PermissionOptions();
        pigeonReturn.setAlert(alert);
        pigeonReturn.setBadge(badge);
        pigeonReturn.setSound(sound);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(alert);
      toListResult.add(badge);
      toListResult.add(sound);
      return toListResult;
    }

    static @NonNull PermissionOptions fromList(@NonNull ArrayList<Object> list) {
      PermissionOptions pigeonResult = new PermissionOptions();
      Object alert = list.get(0);
      pigeonResult.setAlert((Boolean) alert);
      Object badge = list.get(1);
      pigeonResult.setBadge((Boolean) badge);
      Object sound = list.get(2);
      pigeonResult.setSound((Boolean) sound);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class AppMetricaPushPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaPushPigeonCodec INSTANCE = new AppMetricaPushPigeonCodec();

    private AppMetricaPushPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PermissionOptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PermissionOptions) {
        stream.write(128);
        writeValue(stream, ((PermissionOptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AppMetricaPushPigeon {

    void activate();

    void saveAppMetricaConfig(@NonNull String config);

    void getTokens(@NonNull Result<Map<String, String>> result);

    void requestPermission(@NonNull PermissionOptions options);

    /** The codec used by AppMetricaPushPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return AppMetricaPushPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `AppMetricaPushPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable AppMetricaPushPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_push_plugin.AppMetricaPushPigeon.activate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.activate();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_push_plugin.AppMetricaPushPigeon.saveAppMetricaConfig", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String configArg = (String) args.get(0);
                try {
                  api.saveAppMetricaConfig(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_push_plugin.AppMetricaPushPigeon.getTokens", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Map<String, String>> resultCallback =
                    new Result<Map<String, String>>() {
                      public void success(Map<String, String> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getTokens(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_push_plugin.AppMetricaPushPigeon.requestPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PermissionOptions optionsArg = (PermissionOptions) args.get(0);
                try {
                  api.requestPermission(optionsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class TokenUpdateApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public TokenUpdateApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by TokenUpdateApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void onTokenUpdated(@NonNull Map<String, String> newTokensArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.appmetrica_push_plugin.TokenUpdateApi.onTokenUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(newTokensArg)),
          channelReply -> callback.reply(null));
    }
  }
}
